import datetime
from datetime import date
import logging
import logging.config
import math
import statistics
import time
import io
import os
import json

import numpy
#from projectq import MainEngine
#from projectq.ops import H, Measure
from flask_cors import CORS
from statistics import NormalDist
from models.randomNumResp import RandomNumResp
from models.simulationResp import SimulationResp
from models.varResp import VarResp
from models.forecastResp import ForecastResp


import inline as inline
import matplotlib
import pandas as pd
import numpy as np
from scipy.stats import norm
from pandas_datareader import data as pdr
from yahoo_fin import stock_info as si
import yfinance as yf
from scipy.stats import norm

yf.pdr_override()
import matplotlib.pyplot as plt
import seaborn as sns
import os
# %matplotlib inline
sns.set()
plt.style.use('fivethirtyeight')
from base64 import encodebytes

import sys

from flask import Flask, jsonify, request
from flask_restful import Resource
from sqlalchemy import event
from sqlalchemy.engine import Engine
from flask import send_file

app = Flask(__name__)
CORS(app)
cors = CORS(app, resource={
    r"/*": {
        "origins": "*"
    }
})

def getPstaticRandomNum():
    m = np.array(
        [831821414, 902150176, 3446571867, 2375188664, 1806765092, 566107049, 2533503221, 860428474, 2672499484,
         1211892099, 3402204983, 4257661684, 979108144, 4287264951, 149882173, 4285271117, 685878781, 3697413677,
         476513675, 1336128301, 4121783682, 2917088214, 2861878855, 2607752633, 518356990, 3707358503, 2214438706,
         2952339418, 651438910, 1707984026, 2076188760, 3931749123, 822067419, 3034445702, 2642926006, 3922837900,
         2013552250, 2335322524, 1857341469, 3485396059, 3970807218, 3866451365, 558307858, 1307477990, 3771460930,
         910207225, 1670691575, 2845007373, 3801230512, 179341164, 632657366, 3724059585, 2204962478, 1476947025,
         2322650618, 2508158438, 732277035, 2651739859, 1210308965, 3649031575, 2969030092, 2339644253, 327756646,
         2431141849, 1686588277, 2250312141, 4110181964, 1885812958, 2438873459, 3641109972, 1339702775, 2018917465,
         3491684075, 3078565178, 133791587, 1351828605, 2825272553, 1985497831, 2833676942, 385038485, 71877302,
         1763461003, 3069651045, 3862522335, 1093153598, 4073605655, 3583630024, 2460253941, 1875591900, 1503435580,
         1922410097, 1025071723, 1409653036, 3988287741, 2591078333, 2106644657, 2413778261, 1954135839, 736582104,
         1885512564, 353021270, 1356219036, 3781854158, 2285097398, 2137974642, 2891367286, 3616628544, 3502839966,
         2238100305, 2181374535, 2890707809, 4104860635, 814331094, 2708828857, 4139130151, 3976492905, 2674266936,
         1740344519, 1372024216, 2379814770, 386303214, 298456927, 3821632900, 1070196024, 2864283154, 2497016842,
         3519466370, 1302191098, 1385656862, 1769619727, 1612180180, 280037547, 2790066283, 2962721218, 571886489,
         535160537, 1027542826, 1421986107, 1720601870, 3435995359, 755812034, 1865122093, 1032867091, 1830357561,
         140212135, 1009905194, 3409345587, 1858903274, 2114476836, 1328320455, 3978976294, 1907872367, 250319587,
         4156729888, 2781193643, 2757143605, 4095372721, 109883032, 1199577445, 1136026218, 3451519754, 1122503815,
         1031924589, 43226847, 1788911795, 3688146417, 2410237445, 3179326544, 2898656375, 2961269400, 1318612573,
         1554662981, 3956620151, 2224132026, 4084122814, 2734765574, 641169092, 2200682024, 677134560, 446675214,
         2629266262, 414392451, 1310100652, 76921005, 1854652004, 3386126698, 3168802752, 3553697320, 294714802,
         628268508, 2340761802, 3255070433, 2130470075, 2964011065, 2392195439, 3554610126, 1854909351, 3832201883,
         1788126867, 3559924639, 1932758146, 2006715986, 2215767052, 993902548, 2989214641, 2548677772, 2091511741,
         3535658124, 965262633, 4184022429, 1632890390, 1136281341, 594611760, 2055454319, 1342339601, 1297533134,
         1328502898, 3260811344, 389650847, 3712495524, 3705633951, 2084198891, 154142910, 4071193141, 1988935182,
         300420474, 834609166, 1281066425, 1041414957, 1271898556, 2028916392, 1998354261, 2056106859, 388316030,
         2694638296, 781606009, 3944526715, 3861090635, 2625882249, 2573203126, 2150139658, 3402773188, 761480335,
         2064157327, 242633062, 3577298726, 1303139162, 3454052644, 3298301225, 1871236639, 2643560724, 2178298524,
         2572403143, 413947611, 249303814, 3268114089, 516955661, 1902829604, 3607987102, 410552684, 2740278958,
         1008947861, 1843772862, 3584450574, 4231052836, 2013899198, 2504673886, 3131730249, 3661523327, 1575020616,
         3426332309, 1779457441, 3894125352, 1066119400, 2200111165, 1141441242, 54559977, 3182706872, 1283679597,
         1102779214, 2572334181, 2453304852, 3799424771, 1061002183, 2271576748, 2077999598, 3941432460, 3854333805,
         379883784, 2216157660, 3544428948, 3024111968, 784598487, 3980778799, 336761715, 1558304437, 2165512390,
         292745258, 1109157999, 2774832159, 3620795037, 645040221, 1064064452, 2241091162, 2804472852, 3756557928,
         2918793513, 2699459418, 3362889493, 2393367139, 1752605873, 875057483, 1779644270, 2137212993, 1178472675,
         2749986563, 83289958, 2470996080, 1996592750, 4058553099, 1483416578, 3656579389, 3130895256, 1724551664,
         177929741, 1843852536, 2608574671, 2900734789, 1730139505, 668600652, 2841033919, 3209004032, 2993436890,
         2331339732, 151929737, 3098262396, 882501777, 249046496, 4103307783, 2253816640, 3290833893, 15237770,
         2920643806, 1603646238, 2502094280, 1103250780, 607759959, 3294244088, 3599674431, 3240201792, 1861984687,
         3689153032, 735615032, 789831708, 3644770156, 4217485905, 1886311907, 2359124312, 656458401, 3255151136,
         2531899355, 3356518031, 1708479408, 1682702517, 3296541076, 1633029568, 77389518, 4071994863, 3941443111,
         534229504, 1820086566, 735002310, 3664966075, 717572888, 17624219, 3723595824, 2184281675, 3475067968,
         2925098912, 1318518240, 3968270131, 491180226, 3447354684, 674121398, 91556549, 4022656938, 3239178882,
         48063372, 651219302, 45754350, 660042540, 3057847221, 1083207072, 3190720159, 1417559014, 3124029478,
         2383782282, 1300411448, 305542034, 1937539630, 149855510, 2956831502, 1168153675, 3112779881, 2876039327,
         2413127857, 3621557302, 2367691458, 3259437116, 1372343079, 636001564, 2475642371, 486733877, 692718071,
         52482021, 1162972779, 3245533533, 205401067, 616132249, 4001770035, 1046905417, 2773401092, 3422712827,
         3201097151, 1607403769, 268789559, 2903322867, 3866468339, 2859152674, 1894146292, 3880772297, 2746716718,
         733050380, 3396452243, 3536458675, 617188167, 1407483815, 2888758357, 3293322618, 2248856275, 419286931,
         1636715937, 3950734076, 2444051688, 647246564, 2316655891, 3125933145, 1241301237, 3382964796, 1503848320,
         3155323621, 955249134, 3033991993, 1208803935, 2301312647, 2828848709, 1032156861, 206017317, 2545164952,
         1711529107, 3931975908, 3584013384, 866718853, 481089252, 1397656063, 3073596089, 181988927, 2895172809,
         2359150044, 1355062237, 2808169764, 1856405346, 3239482138, 1559830627, 1363058444, 3434016908, 3593392322,
         449612204, 1455142451, 4286639125, 3580890879, 625976307, 2623591022, 3210024000, 3110187461, 1580411122,
         2081913948, 342832613, 2617955899, 1054708672, 2897382782, 2816698015, 2598948544, 1055999855, 2046343247,
         709089231, 593195769, 1761355720, 3935642009, 1689666410, 2220016894, 2382748251, 182764625, 622517281,
         2979384244, 412548903, 3377784997, 3327019926, 1762551366, 2447678761, 4273229348, 1973645162, 1661261694,
         670639068, 3974892553, 865829780, 3286313167, 2146982960, 1350401675, 3602019817, 3925149690, 1513085216,
         771264125, 545279117, 2136315430, 3785097458, 1536035774, 231901579, 3775322110, 3834824990, 2712513385,
         902013995, 2820425392, 414455578, 4103243223, 58700624, 492112109, 2757754253, 1214245176, 3564788809,
         1656990668, 2063323327, 82257147, 3485117237, 4231188931, 3148226122, 76941288, 984508634, 324734093,
         3496505493, 1740671573, 3645748468, 3063652565, 1454127271, 3816395435, 3835488272, 1514987738, 767773705,
         1170887816, 3067029428, 176169466, 2982780726, 4079802898, 2399597157, 2818026765, 1009579374, 95694103,
         760977939, 3880980298, 2603906093, 1945556337, 1749906411, 65216210, 1803691494, 3417588648, 4096920595,
         3310322794, 4093539843, 3987462251, 767120471, 3476716498, 2773295025, 1569651036, 913735066, 1343429978,
         564472281, 4253858336, 1947793166, 957530000, 3453559943, 3878884099, 1028290117, 49835518, 2400317093,
         3049079722, 2101822108, 1768686788, 1364983520, 337875196, 2013565481, 301871019, 1647364200, 563744837,
         3845873798, 2656982938, 133182642, 4287576799, 2207340339, 2064575952, 1606090668, 496358238, 624953282,
         3745167008, 3070045989, 2456747621, 796341774, 3436117048, 2424605505, 271930663, 2000328537, 3386803848,
         2112950056, 4213880770, 526197479, 2079188084, 4075560337, 3350893871, 1323636307, 3002958295, 3926515005,
         2863114300, 53333408, 2285935488, 4250089302, 140968633, 1813399872, 2250076755, 448410812, 619517307,
         72795214, 92549526, 1732031546, 73775632, 67075093, 2544175339, 3755393524, 553804078, 2702285569, 3888506317,
         1842742682, 394809808, 4192338445, 714189632, 1925345906, 2799874244, 1901209841, 2083086755, 994534018,
         1789073120, 2075602790, 3575955435, 2517449156, 60717088, 2921086386, 1859995029, 4005241677, 2655318575,
         3732643, 216916277, 2094337706, 3527473033, 3397442372, 2100115777, 2600885171, 218817225, 1389148937,
         18015442, 64506184, 340544201, 1762112377, 2255086852, 3039018492, 980565381, 185410098, 1239550485,
         1460688381, 1105269866, 577047805, 1698082478, 2817824108, 1754695037, 2960389333, 3043003634, 2064395130,
         3301628164, 25338601, 138448411, 168860296, 3622334421, 2747402500, 2849428534, 1529633549, 61944767,
         1880959186, 1675515466, 2441235748, 3439971160, 3636963980, 3608715907, 4022615988, 2026873245, 2801697244,
         3583095474, 307116220, 1450589640, 1364758000, 3615378949, 3440622884, 3333161855, 713785479, 2495080962,
         3808748847, 2844973215, 381956745, 1807688274, 545237071, 716418951, 762370247, 3428935209, 3847114726,
         2599244308, 3841000247, 1908085972, 743117786, 4142923519, 4292513449, 70336279, 2953815453, 2594013749,
         1899309836, 142813687, 1224409376, 681685953, 2201096721, 2110309431, 2406417107, 450326299, 1220545653,
         3575168863, 3419794671, 2757194888, 2125571094, 1915251568, 291484832, 3004766512, 1170957840, 1969879003,
         1359358751, 1323609385, 2532506269, 1058445383, 3457085050, 3817543885, 2420003915, 3118534363, 1063622527,
         131339015, 1414125324, 108303653, 3881758369, 2314296185, 1548617149, 1179794855, 2985496529, 2286368312,
         1244064597, 4145582393, 612645944, 3777857226, 1501764379, 1830709794, 878702697, 288424796, 1923568537,
         2005591977, 3892342309, 5101032, 1053313654, 1666764734, 667003756, 201281887, 2619297858, 4051682636,
         3720330698, 4199931862, 152469083, 3403076389, 2353067396, 464117083, 3035580, 3835972786, 1997277119,
         1311675630, 644999679, 1638968290, 1890575562, 1342411848, 3329114992, 895641759, 4136510924, 2002463343,
         2940894350, 3266515052, 2427366431, 2544260991, 4136506525, 3863623348, 3965531540, 4136991622, 1724245117,
         284916758, 548755648, 326927756, 531496088, 2919203791, 2767747214, 3021673372, 504247186, 3501608179,
         1781742252, 1861944737, 540937321, 4242373218, 1417065020, 1633811159, 317592748, 4004587590, 886878467,
         535184354, 4074999294, 877098369, 1749379766, 2638760789, 3107963245, 2913578111, 2340293041, 1588081616,
         3463655863, 1486437797, 651478500, 3346422815, 3310322684, 3580627430, 2693809512, 190943956, 2770310774,
         3671315262, 1724095323, 576432163, 1770328650, 4267141589, 3637014898, 3782379960, 1126675879, 2396514256,
         3834425078, 4058801954, 3863455011, 1959958989, 1758691140, 3070428496, 3776869418, 2881944985, 746338544,
         2493464506, 744408242, 505804362, 2602076882, 2185879825, 94183978, 3489709427, 1693029891, 3409757610,
         897241596, 1783176020, 3338530120, 681471233, 3555378079, 3120371278, 92865234, 182545345, 2802275156,
         4243969383, 3468998705, 3333814966, 1944568230, 4167607869, 1968102290, 2230775856, 2762607156, 612613141,
         4020662196, 3908891062, 3218308824, 2272838402, 4165105209, 3362152129, 851776370, 640425489, 954267568,
         1959092718, 2207079316, 1834356286, 2032278497, 1323102659, 2489776021, 472110823, 2810455435, 856132130,
         2537386940, 2685015967, 1682563566, 1784208087, 1574692108, 2248846468, 2547437933, 2498186049, 1776366599,
         1675892403, 3107887064, 1084195999, 3947387078, 1391946696, 3854574588, 3775966871, 1262385765, 2839556705,
         1171813316, 1577229183, 3667477658, 922130955, 595539897, 4294435116, 669804108, 3853078140, 1232097027,
         2810065237, 953264506, 3449578944, 2418327741, 59959355, 3734241352, 2046177083, 3995213334, 2119823238,
         3064897672, 2978496505, 2555761678, 994272724, 4148863821, 2113096463, 2099409409, 2755082981, 124788004,
         1020533786, 2234359360, 716835207, 4226955819, 3143865263, 1797223673, 1474857633, 3624970990, 1613816385,
         2644126732, 1861000024, 2988561510, 551592806, 1385927813, 2401854411, 3673538083, 1198773105, 3333861227,
         283104449, 1742147519, 2192559562, 1852462345, 694344903, 2783755963, 2497873540, 1902773994, 3461711079,
         1433540692, 1865595477, 2894842786, 729657634, 2229019144, 3975057990, 3530331451, 3904088862, 3973067371,
         2177502634, 2599679839, 2469143836, 4126188076, 2966987916, 595307119, 2128887865, 3771318297, 3370841278,
         548142911, 3767874106, 2335652644, 837619965, 3479792618, 3984177059, 1558671090, 986260953, 1655716427,
         3793205274, 221292138, 4060495682, 153461331, 1886205793, 384825157, 327172628, 1419329884, 705945094,
         3712891849, 230851177, 1549013109, 4278462275, 2346241257, 2625386484, 554218187, 2184575022, 2705044879,
         1959829324, 1342508449, 1265533690, 4164712897, 1807799443, 2203842682, 3904869184, 2846765915, 1802565133,
         3415360385, 3330470655, 1111723146, 468849158, 3660857404, 838583855, 2546541241, 19842999, 1327389987,
         4139235499, 2223149096, 3408331943, 283758430, 4039843899, 1971434324, 2208789561, 3261285812, 314385953,
         2670466883, 1242072299, 884007693, 3877317971, 4118900738, 1518278131, 1680687771, 91900252, 2072410499,
         1175147540, 3905577909, 1995750169, 7950496, 1458053840, 724293516, 2375777406, 4251662078, 3507797907,
         3768469880, 1481405381, 2895650328, 1689596806, 429830474, 2457365856, 3385450832, 1739938153, 4157130006,
         1564552855, 563673502, 2618216485, 2991431512, 2393027130, 2139445271, 3725700059, 374802652, 925324896,
         4079822888, 2815592426, 3949366538, 624507520, 3109019790, 3698441585, 1516589289, 2248224720, 858195502,
         3585225293, 469382453, 1258532573, 1766558811, 1659781556, 1590874981, 3542707816, 3877957670, 1687678786,
         3102369016, 767435896, 514141591, 2963829555, 3004620534, 198049078, 3020070964, 3435187157, 933006306,
         2813523239, 1697464359, 707274872, 1010353150, 2346221499, 3198804094, 1310674119, 3074602554, 3321981404,
         395766460, 3496868376, 1398711027, 1680334837, 3830489373, 2751549879, 2245050095, 1479033678, 3322893757,
         2226107738, 2525496944, 77942955, 4133525459, 69726896, 1539055006, 2168490863, 1619615600, 3523344623,
         4266303418, 2842663462, 4181098293, 2635282241, 2041066846, 2460258402, 2928199902, 2283022019, 3819803459,
         1450729977, 1404078057, 3881793705, 3903275232, 1722939929, 3394777030, 1243444498, 403219277, 2354602040,
         25819139, 2382527091, 2126642345, 1745630659, 503103102, 885601093, 2890190987, 2274358854, 2630167995,
         2739133892, 2290342057, 432083263, 1775992716, 2856226380, 545102549, 467344483, 751372641, 2459821123,
         2259481158, 547624734, 37748120, 3868643620, 611879090, 1785597790, 2921971545, 1311295635, 1602738652,
         51610800, 3880192239, 4043994116, 840340682, 769428861, 3329984675, 4239273606, 1989713637, 2701148905,
         1377238635, 626839848, 1927927693, 922525643, 3467979886, 584860578, 1722907614, 539705076, 969102481,
         3763088780, 286871082, 2921096764, 2362794047, 3885155830, 2591716695, 3808548840, 686249018, 734738742,
         2782205792, 2101297637, 1671676240, 4142889404, 3692949579, 1508169934, 395526793, 2743708798, 1657576654,
         1859400261, 136435459, 565855735, 38121731, 1553379909, 2188026740, 2674803536, 1187941748, 1052397, 60316125,
         2220109195, 600000429, 1711802176, 839893986, 3584526953, 2727342483, 3830969902, 2166121251, 1431049438,
         1307041038, 2335400352, 3957427214, 527844232, 535205507, 456170571, 184965328, 1913551824, 207976980,
         3455528213, 2445748111, 362935230, 1422662127, 366780427, 1150234533, 1067402402, 1638383143, 761683232,
         2209791603, 2015601548, 2712749440, 2529753382, 2904971136, 1784880506, 1623673490, 1270270374, 3568254928,
         2041823991, 3287127054, 932316454, 983855065, 3400906301, 751129387, 403196580, 655088991, 1526009318,
         4176871200, 613498868, 3042021774, 4035538451, 1214382469, 96296510, 4266698756, 339311917, 3974656704,
         1097034870, 2710412817, 1376029481, 1048765641, 3130763147, 3984269638, 1324919188, 505071650, 3156948322,
         176383649, 3206378497, 2637695121, 327344332, 4263150416, 2842038214, 3760210524, 3371263764, 2450767490,
         3462319592, 507756082, 1286288286, 901672185, 1583535562, 3957416721, 307858784, 799154602, 2818199397,
         4202726229, 3017992715, 3336428154, 1622097177, 3526169486, 1338123158, 4208449876, 109809783, 3503649885,
         1522401156, 2192350257, 2089058948, 3407962182, 2445994478, 1442606543, 2415549946, 1277025753, 3715083894,
         2305260256, 2995959152, 3960609351, 1756693808, 2481043421, 4029407007, 3745261292, 2471144975, 2115406189,
         1530966862, 2709678077, 782070131, 3077145925, 4083809736, 9367749, 2287311826, 2683792087, 2903435361,
         2485872529, 438562970, 2932805179, 789428683, 3977885305, 3966115520, 1468850547, 4128329057, 3440014352,
         96097696, 4204142488, 1690754238, 3384438413, 2463082773, 308991475, 2253389707, 1533429302, 1828754775,
         396751606, 190533330, 2804089766, 3983463646, 2442039655, 4091558081, 2832143448, 3111574712, 1663653983,
         2817902666, 18586836, 1134467093, 909631067, 2762405726, 949560558, 2560509131, 2411236308, 3226798385,
         21514648, 3208018, 2961975584, 1816960102, 3832168717, 2739231883, 3565354717, 2568353687, 156680985,
         1946254138, 2487948424, 1792395774, 2799167577, 1135800467, 3226956085, 332190782, 239421250, 2868731283,
         1071764631, 2799646740, 1335765899, 3238106139, 1611022054, 244620513, 1047676414, 2248710107, 2314019741,
         3237629593, 2231066628, 675098649, 2287613438, 1331525443, 3804019357, 296679098, 870201890, 1361874304,
         3533497207, 2387503682, 1465353758, 824075629, 281805703, 4248292327, 3339875086, 721262305, 1450640129,
         2350851595, 3657383117, 706715164, 381633702, 2632711460, 865157387, 2509707297, 408795929, 2346194476,
         2749055534, 1998851299, 3249981746, 1356138667, 54039275, 46056797, 1509854630, 3976739577, 3217485202,
         1462766130, 3732400758, 1964125587, 854769848, 3299876817, 340020170, 2461624376, 2268318616, 301781159,
         333821859, 4177081164, 346260717, 1089968980, 3619286909, 1707579465, 2404260681, 2241609755, 3056099850,
         1762722270, 3436706505, 1914822139, 2560022233, 4235344422, 3603027702, 1701463335, 3561891062, 2683400281,
         2425413507, 2528689418, 1448403607, 3496926168, 2831076291, 1611322163, 490168258, 2134389339, 927631250,
         2243435536, 4028720874, 2118767579, 853396742, 3115469800, 3022449158, 2154391146, 2970393732, 1325841860,
         1897532172, 1931510067, 1902889660, 1314495437, 2564523274, 3355913176, 684098801, 3948558317, 1226612810,
         3093514531, 4090785611, 895342416, 3110442934, 2719154938, 231380283, 2160090847, 3362409407, 1873683562,
         3963997550, 3360586112, 659299608, 1463601084, 854100215, 1064773660, 4261926701, 840776040, 2533560549,
         2271424682, 3515824944, 3918716251, 3637561544, 1657234872, 2428528241, 3151773361, 1521991393, 3863609890,
         2277428303, 1827556883, 2506281150, 3412752857, 3858568898, 657246805, 314495900, 1976905019, 450093033,
         808021894, 1110493776, 2755173454, 1806564567, 2721393766, 2961812817, 1695760822, 2200914202, 2088655335,
         509690952, 4288645932, 4259846849, 2473116317, 1948623467, 2433941236, 2524439202, 1965567208, 3190019601,
         3261207548, 4285618738, 1068875338, 1348811239, 859792661, 237977164, 3207106891, 563229872, 1250520772,
         4265812403, 1156320460, 2187535607, 3362869071, 2369707432, 3531529474, 870599319, 1228510755, 3132358463,
         2448550990, 1747955252, 3558228667, 3243214675, 2699869337, 2139709280, 1683683918, 4211343549, 2884243268,
         2715805160, 3189026618, 3922841030, 197566202, 690823364, 658878577, 3406692036, 2810890122, 3583636441,
         1581745786, 2650775502, 2972469140, 1108969962, 2101237591, 558607123, 227535782, 2653181481, 2569507489,
         1960872961, 3886039396, 514584668, 641334233, 969978646, 905292123, 879491679, 214542439, 1268323207,
         1446479102, 1591786087, 1850906587, 269234456, 3783488858, 1579809729, 4028480065, 1851452055, 2508692504,
         1700137971, 66920990, 2026073010, 3383757957, 2833361728, 2337867320, 2761816869, 3480160988, 3348887206,
         1285319087, 1997847870, 2038115360, 3266053791, 260373162, 1029950006, 779016721, 2844117220, 516280493,
         3977775641, 3029031048, 876320865, 666597731, 498156663, 1092643371, 3229749251, 2065280149, 3102507852,
         2025516018, 3965181089, 3178702321, 3100162516, 3343908622, 284882436, 309463774, 3444028796, 3636539251,
         2363425838, 372625420, 1288727367, 2710104808, 2423351659, 2692184931, 316092614, 840991216, 1808343178,
         2074966108, 3582727702, 309884637, 1664582248, 2615692120, 742738980, 1016206484, 4251267649, 2017819741,
         96325490, 1672659644, 1410265686, 1569070727, 262093682, 858243404, 3619713535, 406222627, 428456649,
         886421041, 1894146837, 3737541132, 389421974, 2156847374, 1091086150, 2724122772, 3211499757, 119194634,
         2616901575, 849540301, 4200050500, 2509551016, 1986224656, 3700181215, 2865926884, 3584368895, 3706926139,
         2984956807, 1335865482, 3000417086, 2847687664, 2318445768, 3555089842, 2638075788, 1600867971, 3900168314,
         4144015742, 2161612587, 4000423504, 479444846, 3973934711, 548920018, 1148410406, 347903281, 1457279927,
         471115479, 2391758549, 2587265824, 2165076170, 1220215224, 3059239397, 74434319, 2232230724, 1951782207,
         1739108957, 1571392874, 2428741782, 2228837908, 40000875, 186122550, 926094910, 1857662334, 2206702534,
         3314666357, 2800489602, 1717149695, 1208038685, 1075188177, 2504827312, 1182267516, 830163312, 849099191,
         1943075797, 2932741397, 2317437761, 2231283972, 120506138, 4246983658, 762990308, 2623379, 2345456932,
         261420111, 2046822889, 2052784541, 388616626, 1470018630, 3999938382, 190007689, 1926410964, 2495303609,
         2410818522, 4184154198, 300751413, 3931217543, 3212941665, 979559736, 1118545546, 554966784, 717287498,
         1052860069, 3836711164, 3727601670, 1039526480, 3141173625, 3093985443, 3665013541, 4018611158, 3390198044,
         349988199, 3399347976, 2448826526, 2157489137, 258676384, 3217340769, 4147640510, 1388220358, 3081537574,
         1895929665, 3484387873, 123758213, 287285783, 2031088827, 1961703234, 2550379243, 1793834072, 89817807,
         1290629191, 1228841903, 1217300937, 2300789515, 1626415529, 4020391034, 3604704813, 3165421256, 459489104,
         3383142374, 1395665225, 498976792, 3072970453, 2776253759, 4123708662, 320671525, 3085368888, 160499385,
         2231757518, 3267129826, 2031139682, 2268931643, 3349556776, 2322106004, 3528279538, 1452727090, 2453542057,
         2275065797, 689242132, 847318412, 166309621, 4084268087, 2793211513, 3583623809, 294756241, 537315805,
         3899566955, 452591608, 1761324848, 3436278921, 614917141, 1707048020, 1240333348, 1954673218, 249658822,
         2782863179, 1481155265, 2651317058, 1953187503, 4241867261, 1674704057, 2132664179, 770346633, 3668558203,
         3696582607, 3222223275, 2214194907, 3019038813, 703799163, 3402552352, 208466691, 3195747420, 2981683803,
         3047589341, 59020736, 166230940, 3111660359, 2757863899, 3194490346, 406449261, 1194676726, 662113797,
         2261135339, 3963700838, 2443922977, 317136168, 3499515628, 3709428220, 3281352648, 3377096717, 3839473085,
         1768408058, 2100566172, 518904260, 3841859042, 1495841871, 1927844721, 2118613420, 3986008172, 1634476198,
         1931155006, 1363213868, 28048643, 2513522172, 3725152553, 2694184791, 3282708047, 3020023707, 1042607773,
         1486362097, 3845744545, 4034961816, 659979009, 1470856772, 3301632368, 1556729668, 2032517762, 2355798043,
         198408433, 506072989, 1333065552, 1349647223, 2587578183, 3701853740, 1824122535, 2385025094, 3554615668,
         420999048, 1677621546, 2116489018, 1001915243, 1624794003, 157262129, 168453473, 2407811933, 264212125,
         3795055161, 3603405066, 395258014, 1140339648, 2597602926, 1050100051, 574819678, 1553169264, 2304151477,
         1565119144, 3012942934, 2654906526, 591920577, 3668192038, 2223342123, 2565548573, 327281176, 1151176937,
         3054358106, 4103245812, 1893270170, 1112143844, 1178216104, 2245240837, 2201306647, 1961953052, 170636534,
         3700636658, 3358152036, 2666168419, 2277797734, 281345511, 4105295445, 3122965241, 2100880589, 2728902549,
         909382081, 2770515764, 1210339767, 738702935, 612979625, 2129794239, 869260979, 341490864, 364006949, 24398002,
         1264359531, 331836767, 1225745529, 2355261160, 3492625586, 1829169037, 1581511880, 943377364, 2446118680,
         694115130, 29418913, 2829675166, 3705217930, 2959089082, 2704725770, 4283013562, 1617585371, 2835172427,
         2993753054, 3672125703, 3352917404, 2744191695, 2704902391, 4131997698, 1577562365, 2991813408, 3545461067,
         2000942317, 726854161, 3408606920, 3344354251, 1304927341, 2817273860, 757491241, 2568328835, 3186509206,
         2884595173, 1668193844, 1651257591, 212367951, 2086520083, 4105053404, 1392221490, 1008682328, 1669886687,
         1809233433, 1277725606, 249247015, 2238365453, 1919946537, 2896571167, 3048135783, 182374796, 1999986165,
         2871328034, 4148610915, 39714526, 3915089335, 65705183, 3079458721, 1172174031, 1787217500, 2476072773,
         409006486, 2419225613, 2897783919, 1470935024, 3216186312, 390332263, 2661896562, 2602388877, 1011056904,
         1356670768, 2471476385, 3827048267, 1074151278, 70915420, 2137430819, 887478207, 1171159605, 1067358465,
         3504524645, 1611527163, 403010723, 4165239877, 1075413090, 3933841029, 1021151921, 2166590091, 3447864209,
         106128226, 3880114152, 581879057, 3878671198, 2861177509, 1842110394, 1336220649, 673746439, 195907303,
         385128853, 461479576, 3691282254, 4072495028, 666763219, 1262889543, 777711777, 2746986223, 3847405959,
         725053806, 33418831, 1065373853, 4111263296, 3120663450, 977698800, 3915304571, 1143657656, 1517174546,
         3341883209, 3110994405, 88564077, 3279998432, 1186408488, 994166501, 2250307421, 184067876, 3168935643,
         3628955214, 2622691165, 31229389, 3139274420, 3659823062, 852665358, 2172614884, 3191761812, 2092000031,
         3370948043, 3581113353, 1326267500, 2979078864, 4197461010, 364585129, 1797522412, 1899433826, 2599797042,
         1799210779, 956387022, 3610718791, 746732025, 1131706237, 2072250984, 745525251, 2171224361, 3673862388,
         2816229124, 483167769, 699987758, 4206356381, 3031569796, 387191527, 1820521749, 3173659345, 3198213678,
         69206850, 99194224, 3202768569, 3987434630, 609297616, 3741772165, 3550836335, 2033712061, 959994444,
         1199338886, 2809681547, 2045037168, 2169971278, 4210970298, 315537968, 306575799, 3419586540, 3269714444,
         2492204758, 2319816607, 75219732, 2662105360, 1249559672, 3714412076, 1501040379, 1831743312, 1538686927,
         2710889847, 1563630041, 2880618170, 3247790854, 3974766789, 3196218208, 4099196078, 3320952374, 1293374677,
         274604433, 3824341702, 3849047772, 740165439, 3092923992, 864640360, 4039270744, 421632439, 4066911724,
         2242216196, 975937968, 1322443612, 3962213791, 595204138, 2753645278, 1381301258, 1015174758, 2108417804,
         2815129722, 2320358016, 484343431, 1022364700, 3053296997, 2458951448, 936710769, 569733299, 1142728878,
         1838276323, 2171352097, 1536422167, 3431756718, 1095373511, 4073337757, 1241271030, 291931864, 563321317,
         3791646738, 2655286270, 3801194570, 4291859963, 4292976565, 1342693971, 2706964798, 902072052, 2307613347,
         2914286731, 245611123, 719090061, 1736656548, 2755433558, 708539493, 3730113999, 2186157738, 3228513479,
         240479621, 4189422061, 750725704, 3770626549, 1282347780, 673735530, 155105774, 2690199204, 2983915937,
         992969238, 2468450282, 3536530457, 392739291, 2911549050, 2805060318, 1480997620, 2215657763, 309368572,
         1100027427, 4049617948, 268807000, 3491071494, 1065873387, 133547311, 4225476360, 572130465, 2037075931,
         3608923881, 3917347754, 2034026376, 2365464373, 3277306487, 499861857, 1236974532, 1776420748, 3656238294,
         1434115012, 3887523815, 3158405809, 427852382, 3408355595, 4187807132, 3278720910, 2405139360, 2828089947,
         3182912765, 221603245, 3466151002, 716074850, 4034268465, 3865922479, 2155157402, 4243273047, 397410089,
         3124890977, 130394624, 4124462270, 3379966318, 3706937682, 3285793142, 1958337309, 2799240563, 1317941091,
         1103067492, 788224598, 3612894410, 2155736208, 2399770988, 2537905134, 265757336, 2059867163, 3058995621,
         2945973765, 3905150038, 1414621607, 147170181, 1340296438, 817140648, 2258159167, 191323254, 91716287,
         295175505, 194952197, 4014466661, 2828331241, 1648875141, 718705981, 813586000, 989214722, 4013931602,
         4170735919, 3467216161, 1769701026, 3487257300, 4285568639, 546052804, 3683052528, 2951664687, 1251015736,
         377593857, 288256570, 3956765045, 2217055241, 3493990260, 1981779074, 2839986932, 775400016, 2205878693,
         1628470874, 1293173052, 3229349318, 4038994120, 3038908866, 395243043, 1161038064, 3902079211, 3011864413,
         398058982, 1942931940, 3126941724, 120569366, 1366000541, 796266615, 3974327008, 2707582483, 3320261291,
         2639576099, 721649673, 1644554303, 4241569079, 3746417334, 4056504773, 1546548915, 592430995, 2424768404,
         1197409502, 3148138384, 1999151644, 4136456052, 311479459, 481975853, 3109789485, 401999707, 2447666894,
         1239409253, 1886481098, 191113942, 3764595965, 3715005878, 1453689029, 145698166, 2506539763, 2126347795,
         3749003931, 362524976, 749825187, 4042900291, 1906783456, 2786374451, 1313922281, 1224939952, 2935252541,
         862140127, 1896419252, 2255864661, 1442059381, 3412753711, 1687078561, 3786658715, 4046189610, 3799001597,
         650807663, 2004767057, 1079711402, 473778534, 823687437, 945400465, 3628566817, 2312377698, 1137034611,
         2305428422, 1848547474, 2169492104, 2463197560, 2675339419, 1807638131, 818280215, 1473423927, 3083447661,
         400474319, 257769470, 1939056713, 2148823287, 168492713, 1848366852, 2245432534, 1790299056, 1920504262,
         2773898124, 112353535, 510295552, 3465751364, 1502788175, 3134115268, 768657707, 2695092801, 1706020866,
         4196679373, 1419104458, 3983091313, 2787462565, 2866596261, 799619429, 4134593936, 905772583, 2114305588,
         96515718, 393775948, 442543947, 1246940963, 208254124, 3098185256, 1069060722, 3592905368, 2050727037,
         3313776381, 3925915746, 2433118716, 4028018007, 3787117378, 3553546739, 2313876333, 524049838, 1426370517,
         421533960, 733074064, 1939684170, 4150275319, 1997514790, 3817149310, 3167949622, 1401985827, 2286618503,
         2612160067, 4119422515, 974969649, 1403179208, 859268431, 2957003240, 1443686022, 2257957375, 2814437974,
         2616902809, 3544964895, 2751305917, 3549885574, 3922655981, 793754685, 2667647346, 2189879335, 990221986,
         917707621, 1627554248, 1904355443, 9387510])
    return m

def VaR_PRNG(stock, S, start, end, c, period, iterations):
    data = pdr.get_data_yahoo(stock, start=start, end=end)['Adj Close']
    returns = (data / data.shift(1)) - 1
    returns.dropna(inplace=True)
    mu = returns.mean()
    sigma = returns.std()
    z = np.random.normal(0, 1, [1, iterations])
    ST = S * np.exp(period * (mu - 0.5 * sigma ** 2) + sigma * np.sqrt(period) * z)
    ST = np.sort(ST)
    Spc = np.percentile(ST, (1 - c) * 100)
    var = S - Spc
    return str(int(var))

def VaR_QRNG(stock, S, start, end, c, period, iterations):
    data = pdr.get_data_yahoo(stock, start=start, end=end)['Adj Close']
    returns = (data / data.shift(1)) - 1
    returns.dropna(inplace=True)
    mu = returns.mean()
    sigma = returns.std()
    quantum_engine = MainEngine()
    #z = np.array([0])
    z = np.array([])
    rand_array = np.array([])
    max = 2
    iterations = 0
    min = 1
    is_number_generated = True
    leading_zero = ""
    diff = len(bin(max)[2:]) - len(bin(min)[2:])
    for zero in range(diff):
        leading_zero += "0"

    if (min > max or max - min < 2 or min < 0 or max < 0):
        is_number_generated = False
        z = -1
    for w in range(iterations):
        # Range
        is_number_generated = True
        # print(len(bin(100)[2:]))
        random_fraction = get_random_number(diff, leading_zero + str(bin(min)[2:]), bin(max)[2:])

    m=getPstaticRandomNum()
    min_rand = np.amin(m)
    max_rand = np.amax(m, axis=0)
    print(max_rand)
    print(min_rand)
    for i in m:
       normalized_rand = ( i - min_rand )/ (max_rand - min_rand)
       rand_array= np.append(rand_array,normalized_rand)
    ST = S * np.exp(period * (mu - 0.5 * sigma ** 2) + sigma * np.sqrt(period) * rand_array)
    ST = np.sort(ST)
    Spc = np.percentile(ST, (1 - c) * 100)
    var = S - Spc
    return str(int(var))

def get_random_bit(quantum_engine):
    qubit = quantum_engine.allocate_qubit()
    H | qubit
    Measure | qubit
    random_bit = int(qubit)
    return random_bit

def get_random_number(diff,min,max):
    rand_bit = ""
    count_word = ""
    cont_bit = ""
    found_zero = True
    if(diff > 0):
        for c in map(int, min):
            if(found_zero):
                if(c == 1 or (c == 0 and str(1) not in count_word )):
                    count_word +=str(c)
                else:
                    found_zero = False
        for i in range(count_word.count("1")):
            cont_bit +="1"
    else:
        iteration = len(str(min))
        common_pattern = False
        while (iteration > -1 and not common_pattern):
            if (max.startswith(min[0:iteration])):
                common_pattern = True
                cont_bit = min[0:iteration]
            iteration -= 1
    quantum_engine = MainEngine()
    for i in range(len(max)-len(cont_bit)):
        # calling the random number function and append the return to the list
        temp = str(get_random_bit(quantum_engine))
        rand_bit += temp
    # Flushes the quantum engine from memory
    if(diff > 0):
        if(count_word.find("1") > -1):
            rand_bit=rand_bit[:count_word.find("1")]+cont_bit+rand_bit[count_word.find("1"):]
            print(rand_bit)
    else:
        rand_bit=cont_bit+rand_bit
    random_number = int(rand_bit, 2)
    return random_number

@app.route('/qusec/getrandom', methods=['POST'])
def process():
    try:
        min =int(request.form.get('min'))
        max =int(request.form.get('max'))
        is_number_generated = True
        leading_zero = ""
        diff = len(bin(max)[2:]) - len(bin(min)[2:])
        for zero in range(diff):
            leading_zero += "0"

        if (min > max or max - min < 2 or min < 0 or max < 0):
            is_number_generated = False
            z = -1
        while (is_number_generated):
            z = get_random_number(diff, leading_zero + str(bin(min)[2:]), bin(max)[2:])
            # print(z)
            if (z > min and max > z):
                is_number_generated = False
    except Exception as unknown_error:
        print('Some other error:', str(unknown_error))

    randomNumRes = RandomNumResp(str(z))
    resp = json.dumps(randomNumRes.__dict__)
    return resp


@app.route('/qusec/getVAR', methods=['POST'])
def calculate_VAR():
    try:
        ne= ""
        var_q =""
        stock =request.form.get('asset')
        start = pd.to_datetime('2015-01-01')
        end = pd.to_datetime('2021-11-01')
        s = si.get_live_price(stock)
        print(s)
        c = 0.95
        period = 1
        iterations = 1000

        ne = VaR_PRNG(stock, s, start, end, c, period, iterations)
        var_q = VaR_QRNG(stock, s, start, end, c, period, iterations)
        #var_q = VaR_QRNG(stock, s, start, end, c, period, iterations)
    except Exception as unknown_error:
        print('Some other error:', str(unknown_error))

    return "Live Price:"+str(int(s))+"\nVaR[PRNG]:"+ne+"\nVaR[QRNG]:"+var_q

@app.route('/qusec/VAR', methods=['POST'])
def VAR():
    try:
        ne= ""
        var_q =""
        stress_event = 2.33
        elements = []
        pVar = ""
        stock1 =request.form.get('asset_1')
        stock2 = request.form.get('asset_2')
        stock1_per = float(request.form.get('stock1_per'))/100
        stock2_per = float(request.form.get('stock2_per'))/100
        time = float(request.form.get('time'))
        portfolio_amount = float(request.form.get('portfolio_amount'))
        delta = 252
        rand_array = np.array([])
        seed_array = np.array([])
        start = (date.today() - datetime.timedelta(365)).strftime('%Y-%m-%d')
        end = date.today().strftime('%Y-%m-%d')
        data1 = pdr.get_data_yahoo(stock1, start=start, end=end)['Adj Close']
        data2 = pdr.get_data_yahoo(stock2, start=start, end=end)['Adj Close']
        returns1 = (data1 / data1.shift(1)) - 1
        returns1.dropna(inplace=True)
        returns2 = (data2 / data2.shift(1)) - 1
        returns2.dropna(inplace=True)

        mu1 = returns1.mean()
        sigma1 = returns1.std()
        mu2 = returns2.mean()
        sigma2 = returns2.std()
        cov = numpy.cov(returns1,returns2)[0][1]*252
        risk_free_Rate = 0
        variance1 = statistics.variance(returns1)*252
        variance2 = statistics.variance(returns2)*252
        print(returns1)
        print(returns2)
        expected_volatility = math.sqrt((stock1_per * stock1_per * variance1) + (stock2_per * stock2_per * variance2) + (2*cov))
        print(expected_volatility)
        iteration = 500
        pVar = calculatePVAR(stock1, stock2, stock1_per, stock2_per, time, portfolio_amount, pVar)
        m=getPstaticRandomNum()
        np.random.shuffle(m)
        min_rand = np.amin(m)
        max_rand = np.amax(m, axis=0)
        for i in m:
            normalized_rand = (i - min_rand) / (max_rand - min_rand)
            # print(normalized_rand)
            rand_array = np.append(rand_array, normalized_rand)
        iter = 0
        i = 0
        while i < iteration:
            try:
                seed = math.exp((risk_free_Rate - (0.5 * expected_volatility * expected_volatility )* (time/ delta)) +(expected_volatility*(math.sqrt(time/delta))*NormalDist().inv_cdf(rand_array[i])))
            except Exception as unknown_error:
                print(unknown_error)
            seed_array = np.append(seed_array, seed)
            elements.append(seed)
            i= i+1
        percent_loss95= 1-numpy.percentile(seed_array,5)
        percent_loss99 = 1 - numpy.percentile(seed_array, 1)
        Absolute_loss95 =  portfolio_amount * percent_loss95
        Absolute_loss99 = portfolio_amount * percent_loss99
        var = stress_event * portfolio_amount * expected_volatility * math.sqrt(time/delta)
    except Exception as unknown_error:
        print('Some other error:', str(unknown_error))
    varSimulation = VarResp(round(var),round(pVar),round(Absolute_loss95),round(percent_loss95*100),elements)
    resp = json.dumps(varSimulation.__dict__)
    return resp

def calculatePVAR(stock1,stock2,stock1_per,stock2_per,time,portfolio_amount,pVar):
    try:
        ne = ""
        var_q = ""
        stress_event = 2.33
        elements = []
        delta = 252
        rand_array = np.array([])
        seed_array = np.array([])
        start = (date.today() - datetime.timedelta(365)).strftime('%Y-%m-%d')
        end = date.today().strftime('%Y-%m-%d')
        data1 = pdr.get_data_yahoo(stock1, start=start, end=end)['Adj Close']
        data2 = pdr.get_data_yahoo(stock2, start=start, end=end)['Adj Close']
        returns1 = (data1 / data1.shift(1)) - 1
        returns1.dropna(inplace=True)
        returns2 = (data2 / data2.shift(1)) - 1
        returns2.dropna(inplace=True)

        mu1 = returns1.mean()
        sigma1 = returns1.std()
        mu2 = returns2.mean()
        sigma2 = returns2.std()
        cov = numpy.cov(returns1, returns2)[0][1] * 252
        risk_free_Rate = 0
        variance1 = statistics.variance(returns1) * 252
        variance2 = statistics.variance(returns2) * 252
        print(returns1)
        print(returns2)
        expected_volatility = math.sqrt(
            (stock1_per * stock1_per * variance1) + (stock2_per * stock2_per * variance2) + (2 * cov))
        print(expected_volatility)
        iteration = 500
        iter = 0
        i = 0
        while i < iteration:
            # print(rand_array[i])
            rand_number = int.from_bytes(os.urandom(8), byteorder="big") / ((1 << 64) - 1)
            try:
                seed = math.exp((risk_free_Rate - (0.5 * expected_volatility * expected_volatility) * (time / delta)) + (
                            expected_volatility * (math.sqrt(time / delta)) * NormalDist().inv_cdf(rand_number)))
            except Exception as unknown_error:
                print(unknown_error)
            seed_array = np.append(seed_array, seed)
            elements.append(seed)
            # print(seed)
            i = i + 1
        percent_loss95 = 1 - numpy.percentile(seed_array, 5)
        percent_loss99 = 1 - numpy.percentile(seed_array, 1)
        Absolute_loss95 = portfolio_amount * percent_loss95
        Absolute_loss99 = portfolio_amount * percent_loss99
        pVar = stress_event * portfolio_amount * expected_volatility * math.sqrt(time / delta)
    except Exception as unknown_error:
        print('Some other error:', str(unknown_error))
    return pVar

@app.route('/qusec/investment_simulation', methods=['POST'])
def investment_simulation():
    try:
        rand_array = np.array([])
        final_inv_amount = np.array([])
        arrayOfElements = []
        prngElements = []
        current_investment = int(request.form.get('current_investment'))
        mean = float(request.form.get('average_return'))/100
        std_returns = float(request.form.get('St_Dev_of_return'))/100
        time_retire = int(request.form.get('time_retire'))
        annual_investment = int(request.form.get('annual_investment'))
        iteration = 50
        investmentSimulationWithPrng(current_investment, mean, std_returns, time_retire, annual_investment, prngElements)
        m=getPstaticRandomNum()
        min_rand = np.amin(m)
        max_rand = np.amax(m, axis=0)
        for r in m:
            normalized_rand = (r - min_rand) / (max_rand - min_rand)
            if (normalized_rand < 0 or normalized_rand > 1):
                print(r)
                print(min_rand)
                print(max_rand)
            # print(normalized_rand)
            rand_array = np.append(rand_array, normalized_rand)
        iter =0
        i = 0
        np.random.shuffle(rand_array)
        while iter < iteration:
            current_investment_inc = current_investment
            year =0
            while year < (time_retire ):
                try:
                    current_investment_inc=(current_investment_inc*(1+NormalDist(mean, std_returns).inv_cdf(rand_array[i])))+annual_investment
                except Exception as unknown_error:
                    print(unknown_error)
                i= i+1
                year= year + 1
            iter = iter +1
            current_investment_inc = round(current_investment_inc, 2)
            final_inv_amount = np.append(final_inv_amount, current_investment_inc)
            arrayOfElements.append(current_investment_inc)
    except Exception as unknown_error:
        print('Some other error:', str(unknown_error))

    priceSimulationResp = SimulationResp(round(final_inv_amount.mean(),2),round(statistics.median(final_inv_amount),2),round(numpy.percentile(final_inv_amount, 95),2),arrayOfElements,prngElements)
    resp = json.dumps(priceSimulationResp.__dict__)
    return resp


def investmentSimulationWithPrng(current_investment,mean,std_returns,time_retire,annual_investment,prngElements):
    try:
        final_inv_amount = np.array([])
        iteration = 50
        iter = 0
        i = 0
        while iter < iteration:
            print("current_investment_inc")
            current_investment_inc = current_investment
            year = 0
            while year < (time_retire):
                rand_number = int.from_bytes(os.urandom(8), byteorder="big") / ((1 << 64) - 1)
                print(rand_number)
                print(mean)
                print("------------------")
                #print(NormalDist(mean, std_returns).inv_cdf(rand_number))
                try:
                    current_investment_inc = (current_investment_inc * (
                            1 + NormalDist(mean, std_returns).inv_cdf(rand_number))) + annual_investment
                except Exception as unknown_error:
                    print(unknown_error)
                i = i + 1
                year = year + 1
            iter = iter + 1
            current_investment_inc = round(current_investment_inc, 2)
            print(current_investment_inc)
            final_inv_amount = np.append(final_inv_amount, current_investment_inc)
            prngElements.append(current_investment_inc)
    except Exception as unknown_error:
        print(rand_number)
        print(NormalDist(mean, std_returns).inv_cdf(rand_number))
        print('Some other error:', str(unknown_error))

@app.route('/qusec/price_simulation', methods=['POST'])
def price_simulation():
    try:
        rand_array = np.array([])
        final_inv_amount = np.array([])
        std_daily = float(request.form.get('daily_volatility'))/100
        starting_price = float(request.form.get('starting_price'))
        iteration = 50
        prngElements = []
        prngPriceSimulation(std_daily,starting_price,prngElements)
        m=getPstaticRandomNum()
        min_rand = np.amin(m)
        max_rand = np.amax(m, axis=0)
        for i in m:
            normalized_rand = (i - min_rand) / (max_rand - min_rand)
            # print(normalized_rand)
            rand_array = np.append(rand_array, normalized_rand)
        iter =0
        i = 0
        temp_str =''
        listOfElements = []
        while i < iteration:
            print(rand_array[i])
            starting_price=(starting_price*(1+NormalDist(0, std_daily).inv_cdf(rand_array[i])))
            i= i+1
            starting_price=round(starting_price, 2)
            if starting_price:
                #temp_str =temp_str+str(starting_price)+","
                listOfElements.append(starting_price)
                final_inv_amount = np.append(final_inv_amount, starting_price)

    except Exception as unknown_error:
        print('Some other error:', str(unknown_error))
    priceSimulationResp = SimulationResp(round(final_inv_amount.mean(),2),round(statistics.median(final_inv_amount),2),
        round(numpy.percentile(final_inv_amount, 95),2),listOfElements,prngElements)
    resp = json.dumps(priceSimulationResp.__dict__)
    return resp

def prngPriceSimulation(std_daily,starting_price,prngElements):
    try:
        rand_array = np.array([])
        final_inv_amount = np.array([])
        # iteration = int(request.form.get('iterations'))
        iteration = 50
        iter = 0
        i = 0
        temp_str = ''
        while i < iteration:
            rand_number = int.from_bytes(os.urandom(8), byteorder="big") / ((1 << 64) - 1)
            starting_price = (starting_price * (1 + NormalDist(0, std_daily).inv_cdf(rand_number)))
            i = i + 1
            starting_price = round(starting_price, 2)
            if starting_price:
                # temp_str =temp_str+str(starting_price)+","
                prngElements.append(starting_price)
                final_inv_amount = np.append(final_inv_amount, starting_price)
    except Exception as unknown_error:
        print('Some other error:', str(unknown_error))

@app.route('/qusec/forecast_profit', methods=['POST'])
def forcast_profit():
    try:
       stock = request.form.get('asset')
       # input
       sales_min = int(request.form.get('sales_min'))
       sales_max =  int(request.form.get('sales_max'))
       sales_most_likely_volume = int(request.form.get('sales_most_likely'))
       sales_most_likely_price =float(request.form.get('sales_most_likely_price'))
       volume = int(request.form.get('sales_most_likely'))
       production_min_cost = float(request.form.get('production_min_cost'))
       production_max_cost = float(request.form.get('production_max_cost'))
       Loan_Amount = int(request.form.get('Loan_Amount'))
       Interest_rate = float(request.form.get('Interest_rate'))
       tax_slab = float(request.form.get('tax_slab'))
       """
       simulation = 100
       sales_min = 2000
       sales_max= 7500
       sales_most_likely_volume = 6000
       sales_most_likely_price = 8.25
       volume = 6000
       production_min_cost= 4.50
       production_max_cost = 5.80
       Loan_Amount = 50000
       Interest_rate = 2
       tax_slab = 35
       """
       std_deviation = 0.5
       tax_granted = 70
       tax_not_granted = 30
       simulation = 100
       #int.from_bytes(os.urandom(8), byteorder="big") / ((1 << 64) - 1)
       #derivation
       Interest_expense = (Interest_rate/100)* Loan_Amount
       production_avg_cost = (production_min_cost + production_max_cost) / 2

       sales = volume * sales_most_likely_price
       cost = volume * production_avg_cost
       profit_before_tax = sales - cost - Interest_expense
       tax = ((tax_granted * 0.00)/100)+((tax_not_granted * tax_slab)/10000 )* profit_before_tax
       profit = profit_before_tax - tax
       profit_prng_array = np.array([])
       profit_qrng_array = np.array([])
       rand_array = np.array([])
       elements = []
       prngElements = []
       m=getPstaticRandomNum()
       np.random.shuffle(m)
       min_rand = np.amin(m)
       max_rand = np.amax(m, axis=0)
       for i in m:
           normalized_rand = ( i - min_rand )/ (max_rand - min_rand)
           rand_array= np.append(rand_array,normalized_rand)
       i=0
       while i < (simulation * 4):
           rand_number = rand_array[i]
           #Triangle
           c = (sales_most_likely_volume - sales_min)/(sales_max - sales_min)

           if(rand_number <= c):
               triangle_dist_factor = math.sqrt(rand_number * c)
           else:
               triangle_dist_factor= 1-math.sqrt((1-c)*(1-rand_number))
           sales_most_likely_qrng_volume = round(sales_min + ((sales_max - sales_min)*triangle_dist_factor))

           sales_qrng = sales_most_likely_qrng_volume * sales_most_likely_price

           i += 1
           rand_number = rand_array[i]
           print(rand_array[i])
           uniform_dist_factor = production_max_cost - production_min_cost
           production_avg_cost_qrng = production_min_cost  + (uniform_dist_factor * rand_number)
           cost_qrng = sales_most_likely_qrng_volume * production_avg_cost_qrng

           #Normal
           i += 1
           rand_number = rand_array[i]
           # NORMSINV is an Excel function that provides a Z value for a cumulative probability using a standard normal distribution.
           Interest_rate_qrng = Interest_rate + norm.ppf(rand_number)*std_deviation
           Interest_expense_qrng  = (Interest_rate_qrng / 100) * Loan_Amount
           print(rand_array[i])
           profit_before_tax = sales_qrng - cost_qrng - Interest_expense_qrng

           # Discrete
           i += 1
           rand_number = rand_array[i]
           print(rand_array[i])
           if (rand_number <= tax_not_granted / 100):
               disc_dist_factor = tax_slab / 100
           else:
               disc_dist_factor = 0
           tax_qrng = disc_dist_factor * profit_before_tax
           profit_qrng = profit_before_tax - tax_qrng
           profit_qrng_array = np.append(profit_qrng_array, profit_qrng)
           elements.append(profit_qrng)
           i += 1

       i=0
       print("FINISH------------------------------------")
       while i < simulation:
           rand_number = int.from_bytes(os.urandom(8), byteorder="big") / ((1 << 64) - 1)
           c = (sales_most_likely_volume - sales_min) / (sales_max - sales_min)
           if (rand_number <= c):
               triangle_dist_factor = math.sqrt(rand_number * c)
           else:
               triangle_dist_factor = 1 - math.sqrt((1 - c) * (1 - rand_number))
           #print(triangle_dist_factor)
           sales_most_likely_qrng_volume = round(sales_min + ((sales_max - sales_min) * triangle_dist_factor))

           sales_qrng = sales_most_likely_qrng_volume * sales_most_likely_price

           rand_number = int.from_bytes(os.urandom(8), byteorder="big") / ((1 << 64) - 1)
           uniform_dist_factor = production_max_cost - production_min_cost
           production_avg_cost_qrng = production_min_cost + (uniform_dist_factor * rand_number)

           cost_qrng = sales_most_likely_qrng_volume * production_avg_cost_qrng

           rand_number = int.from_bytes(os.urandom(8), byteorder="big") / ((1 << 64) - 1)
           # NORMSINV is an Excel function that provides a Z value for a cumulative probability using a standard normal distribution.
           Interest_rate_qrng = Interest_rate + norm.ppf(rand_number) * std_deviation
           Interest_expense_qrng = (Interest_rate_qrng / 100) * Loan_Amount

           profit_before_tax = sales_qrng - cost_qrng - Interest_expense_qrng
           # Discrete

           rand_number = int.from_bytes(os.urandom(8), byteorder="big") / ((1 << 64) - 1)
           if (rand_number <= tax_not_granted / 100):
               disc_dist_factor = tax_slab / 100
           else:
               disc_dist_factor = 0
           tax_qrng = disc_dist_factor * profit_before_tax
           profit_qrng = profit_before_tax - tax_qrng
           prngElements.append(profit_qrng)
           profit_prng_array = np.append(profit_qrng_array, profit_qrng)
           i += 1

    except Exception as unknown_error:
        print('Some other error:', str(unknown_error))

    forecastProfitSimulation = ForecastResp(round(profit,2),round(profit_prng_array.mean(),2),round(profit_qrng_array.mean(),2),elements,prngElements)
    resp = json.dumps(forecastProfitSimulation.__dict__)
    return resp

# driver function
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
    #uncomment below during production run.And comment above one
    #app.run(host='0.0.0.0', port=5000, ssl_context=('cert.pem', 'privkey.pem'))
